<style lang="css">
  .container {
    background: #f9f9f9;
  }

  .cate-nav {
    position: fixed;
    left: 0;
    top: 0;
    z-index: 1000;
  }

  .cate-nav-body {
    height: 84rpx;
    white-space: nowrap;
    background: #fff;
    border-top: 1px solid rgba(0, 0, 0, .15);
    overflow: hidden;
  }

  .cate-nav .item {
    display: inline-block;
    height: 84rpx;
    min-width: 130rpx;
    padding: 0 15rpx;
  }

  .cate-nav .item .name {
    display: block;
    height: 84rpx;
    padding: 0 20rpx;
    line-height: 84rpx;
    color: #333;
    font-size: 30rpx;
    width: auto;
  }

  .cate-nav .item.active .name {
    color: #ab2b2b;
    border-bottom: 2px solid #ab2b2b;
  }

  .cate-item {
    margin-top: 94rpx;
    height: auto;
    overflow: hidden;
  }

  .cate-item .h {
    height: 145rpx;
    width: 750rpx;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .cate-item .h .name {
    display: block;
    height: 35rpx;
    margin-bottom: 18rpx;
    font-size: 30rpx;
    color: #333;
  }

  .cate-item .h .desc {
    display: block;
    height: 24rpx;
    font-size: 24rpx;
    color: #999;
  }

  .cate-item .b {
    width: 750rpx;
    padding: 0 6.25rpx;
    height: auto;
    overflow: hidden;
  }

  .cate-item .b .item {
    float: left;
    background: #fff;
    width: 365rpx;
    margin-bottom: 6.25rpx;
    padding-bottom: 33.333rpx;
    height: auto;
    overflow: hidden;
    text-align: center;
  }

  .cate-item .b .item-b {
    margin-left: 6.25rpx;
  }

  .cate-item .item .img {
    width: 302rpx;
    height: 302rpx;
  }

  .cate-item .item .name {
    display: block;
    width: 365.625rpx;
    height: 35rpx;
    margin: 11.5rpx 0 22rpx 0;
    text-align: center;
    overflow: hidden;
    padding: 0 20rpx;
    font-size: 30rpx;
    color: #333;
  }

  .cate-item .item .price {
    display: block;
    width: 365.625rpx;
    height: 30rpx;
    text-align: center;
    font-size: 30rpx;
    color: #b4282d;
  }

</style>

<template>
  <view class="container">
    <view class="cate-nav">
      <scroll-view scroll-x="true" class="cate-nav-body" style="width: 750rpx;" scroll-left="{{scrollLeft}}">
        <view wx:for="{{navList}}" class="item {{ id == item.code ? 'active' : ''}}" data-id="{{item.code}}"
              data-index="{{index}}" bindtap="switchCate" wx:key="item.code">
          <view class="name">{{item.name}}</view>
        </view>
      </scroll-view>
    </view>
    <scroll-view scroll-y="true" scroll-top="{{scrollTop}}" style="height:{{scrollHeight}};">

      <view class="cate-item">
        <view class="h">
          <text class="name">{{currentCategory.name}}</text>
          <text class="desc">{{currentCategory.front_name}}</text>
        </view>
        <view class="b">
          <navigator class="item {{(iindex + 1) % 2 == 0 ? 'item-b' : ''}}" url="/pages/product?id={{iitem.code}}"
                     wx:for="{{goodsList}}" wx:for-item="iitem" wx:for-index="iindex" wx:key="item.code">
            <image class="img" src="{{iitem.list_pic_url}}" background-size="cover"></image>
            <text class="name">{{iitem.name}}</text>
            <text class="price">￥{{iitem.retail_price}}</text>
          </navigator>
        </view>
      </view>
    </scroll-view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import Fly from 'flyio/dist/npm/wx'
  import gql from "../config/gql";

  export default class Category extends wepy.page {
    constructor(props) {
      super(props)
      this.fly = new Fly
      //添加拦截器
      this.fly.interceptors.request.use((config, promise) => {
        //给所有请求添加自定义header
        config.headers["authorization"] = "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJkYXRhIjp7InNlcnZpY2UiOiJwcmlzbWEtZGVtb0BkZXYiLCJyb2xlcyI6WyJhZG1pbiJdfSwiaWF0IjoxNTI0ODI5MTY0LCJleHAiOjE1MjU0MzM5NjR9.AuSUr1qeADdnkqYi2GYkpEwKPbb3g9s670Jo37yHrJE";
        return config;
      })
    }

    data = {
      // text:"这是一个页面"
      navList: [],
      goodsList: [],
      id: 0,
      // 决定是一级分类还是二级分类的显示页
      isSub: false,
      currentCategory: {},
      scrollLeft: 0,
      scrollTop: 0,
      scrollHeight: 0,
      page: 1,
      size: 10000
    }

    methods = {
      switchCate: (event) => {
        let currentTarget = event.currentTarget
        if (this.id === currentTarget.dataset.id) {
          return false
        }
        let clientX = event.detail.x
        if (clientX < 60) {
          this.scrollLeft = currentTarget.offsetLeft - 60
        } else if (clientX > 330) {
          this.scrollLeft = currentTarget.offsetLeft
        }
        this.id = currentTarget.dataset.id
        this.getCategoryInfo()
        this.$apply()
      }
    }

    /**
     * category 分两种
     * 1. 一级分类 显示的商品是所有子分类的商品集合
     * 2. 二级分类 直接显示子分类下的的商品即可
     * @returns {Promise<void>}
     */
    getCategoryInfo = async () => {
      let currentCategory, navList
      if (!this.isSub) {
        //显示一级分类
        const {data: {data: {category}}} = await this.fly.post(gql.baseUrl, {
          ...gql.category.currentPrimaryCategory,
          variables: {
            code: this.id
          }
        })
        currentCategory = category
        const {data: {data: {categories}}} = await this.fly.post(gql.baseUrl, gql.category.primaryCateList)
        // console.log(currentCategory)
        // console.log(navList)
        //  fetch all products combined under current primary category
        navList = categories
      } else {
        const {data: {data: {subCategory}}} = await this.fly.post(gql.baseUrl, {
          ...gql.category.currentSubCategory,
          variables: {
            code: this.id
          }
        })
        currentCategory = subCategory
        const {data: {data: {subCategory: {parent: {subs}}}}} = await this.fly.post(gql.baseUrl, {
          ...gql.category.subCateList,
          variables: {
            code: this.id
          }
        })
        navList = subs
      }
      this.currentCategory = currentCategory
      this.navList = navList
      this.$apply()

      this.adjustNavPosition()
      this.getProductsList()
    }

    getProductsList = async (isSub = false) => {
      let productsList = []
      if (!this.isSub) {
        const {data: {data: {productsConnection: rowProducts}}} = await this.fly.post(gql.baseUrl, {
          ...gql.category.primaryCateProductsList,
          variables: {
            code: this.id
          }
        })
        rowProducts.edges.forEach(edge => productsList.push(edge.node))
      } else {
        const {data: {data: {products}}} = await this.fly.post(gql.baseUrl, {
          ...gql.category.subCateProductsList,
          variables: {
            code: this.id
          }
        })
        productsList = products
      }
      this.goodsList = productsList
      this.$apply()
    }

    adjustNavPosition = () => {
      //  current category position
      let currentIndex = 0
      this.navList.forEach((nav, i) => nav.code === this.id ? currentIndex = i : null)
      //  make sure current category is visible
      const navListLength = this.navList.length
      if (navListLength > 5 && currentIndex > navListLength / 2) {
        this.scrollLeft = currentIndex * 60
      }
    }

    onLoad = (options) => {
      // 页面初始化 options为页面跳转所带来的参数
      if (options.id) {
        this.id = parseInt(options.id)
        this.isSub = Boolean(options.is_sub)
      }
      console.log(options.id)
      console.log(options.is_sub)

      // acquire window height
      wx.getSystemInfo({
        success: (res) => {
          this.scrollHeight = res.windowHeight
        }
      })

      // fetch data from backend
      this.getCategoryInfo()
    }
  }
  //
  //
  // Page({
  //   onLoad: function (options) {
  //     // 页面初始化 options为页面跳转所带来的参数
  //     var that = this;
  //     if (options.id) {
  //       that.setData({
  //         id: parseInt(options.id)
  //       });
  //     }
  //
  //     wx.getSystemInfo({
  //       success: function (res) {
  //         that.setData({
  //           scrollHeight: res.windowHeight
  //         });
  //       }
  //     });
  //
  //
  //     this.getCategoryInfo();
  //
  //   },
  //   getCategoryInfo: function () {
  //
  //     let that = this;
  //     util.request(api.GoodsCategory, {id: this.data.id})
  //       .then(function (res) {
  //         if (res.errno == 0) {
  //           that.setData({
  //             navList: res.data.brotherCategory,
  //             currentCategory: res.data.currentCategory
  //           });
  //
  //           //nav位置
  //           let currentIndex = 0;
  //           let navListCount = that.data.navList.length;
  //           for (let i = 0; i < navListCount; i++) {
  //             currentIndex += 1;
  //             if (that.data.navList[i].id == that.data.id) {
  //               break;
  //             }
  //           }
  //           if (currentIndex > navListCount / 2 && navListCount > 5) {
  //             that.setData({
  //               scrollLeft: currentIndex * 60
  //             });
  //           }
  //           that.getGoodsList();
  //
  //         } else {
  //           //显示错误信息
  //         }
  //
  //       });
  //   },
  //   onReady: function () {
  //     // 页面渲染完成
  //   },
  //   onShow: function () {
  //     // 页面显示
  //     console.log(1);
  //   },
  //   onHide: function () {
  //     // 页面隐藏
  //   },
  //   getGoodsList: function () {
  //     var that = this;
  //
  //     util.request(api.GoodsList, {categoryId: that.data.id, page: that.data.page, size: that.data.size})
  //       .then(function (res) {
  //         that.setData({
  //           goodsList: res.data.goodsList,
  //         });
  //       });
  //   },
  //   onUnload: function () {
  //     // 页面关闭
  //   },
  //   switchCate: function (event) {
  //     if (this.data.id == event.currentTarget.dataset.id) {
  //       return false;
  //     }
  //     var that = this;
  //     var clientX = event.detail.x;
  //     var currentTarget = event.currentTarget;
  //     if (clientX < 60) {
  //       that.setData({
  //         scrollLeft: currentTarget.offsetLeft - 60
  //       });
  //     } else if (clientX > 330) {
  //       that.setData({
  //         scrollLeft: currentTarget.offsetLeft
  //       });
  //     }
  //     this.setData({
  //       id: event.currentTarget.dataset.id
  //     });
  //
  //     this.getCategoryInfo();
  //   }
  // })
</script>
